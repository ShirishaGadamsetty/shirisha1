Mean_2015 = mean(Y2015, na.rm=TRUE)) %>%
arrange(desc(Mean_2015))
#mutate() function :
#Example 28 : Create a new variable
mydata2 = mutate(mydata1, change=Y2015/Y2014)
#Example 29 : Multiply all the variables by 1000
mydata11 = mutate_all(mydata, funs("new" = .* 1000))
#Example 30 : Calculate Rank for Variables
mydata12 = mutate_at(mydata, vars(Y2008:Y2010), funs(Rank=min_rank(.)))
#Example 30 : Calculate Rank for Variables
mydata12 = mutate_at(mydata1, vars(Y2008:Y2010), funs(Rank=min_rank(.)))
myata13 = mutate_at(mydata1, vars(Y2008:Y2010), funs(Rank=min_rank(desc(.))))
#Example 31 : Select State that generated highest income among the variable 'Index'
out = mydata %>% group_by(Index) %>% filter(min_rank(desc(Y2015)) == 1) %>%
select(Index, State, Y2015)
#Example 31 : Select State that generated highest income among the variable 'Index'
out = mydata1 %>% group_by(Index) %>% filter(min_rank(desc(Y2015)) == 1) %>%
select(Index, State, Y2015)
#Example 32 : Cumulative Income of 'Index' variable
out2 = mydata1 %>% group_by(Index) %>% mutate(Total=cumsum(Y2015)) %>%
select(Index, Y2015, Total)
out2
#join() function :
df3 = inner_join(df1, df2, by = "ID")
inner_join(df1, df2, by = c("ID"="ID1"))
df1
df2
#Example 34 : Applying LEFT JOIN
left_join(df1, df2, by = "ID")
#Example 35 : Applying INTERSECT
mtcars$model <- rownames(mtcars)
inner_join(df1, df2, by = c("ID"="ID"))
second <- mtcars[10:32, ]
intersect(first, second)
second
intersect(first, second)
#Example 36 : Applying UNION
x=data.frame(ID = 1:6, ID1= 1:6)
y=data.frame(ID = 1:6,  ID1 = 1:6)
union(x,y)
union_all(x,y)
#Example 37 : Rows appear in one table but not in other table
setdiff(first, second)
#Example 38 : IF ELSE Statement
#if_else(condition, true, false, missing = NULL)
df <- c(-10,2, NA)
if_else(df < 0, "negative", "positive", missing = "missing value")
#Create a new variable with IF_ELSE
df =data.frame(x = c(1,5,6,NA))
df %>% mutate(newvar=if_else(x<5, x+1, x+2,0))
#Nested IF ELSE
mydf =data.frame(x = c(1:5,NA))
mydf %>% mutate(newvar= if_else(is.na(x),"I am missing",
if_else(x==1,"I am one",
if_else(x==2,"I am two",
if_else(x==3,"I am three","Others")))))
#Example 39 :  Apply ROW WISE Operation
df = mydata %>%
rowwise() %>% mutate(Max= max(Y2012,Y2013,Y2014,Y2015)) %>%
select(Y2012:Y2015,Max)
#Example 40 : Combine Data Frames
df1=data.frame(ID = 1:6,  x=letters[1:6])
df2=data.frame(ID = 7:12, x=letters[7:12])
xy = bind_rows(df1,df2)
xy = bind_cols(x,y)
xy = bind_rows(df1,df2)
#Example 41 : Calculate Percentile Values
mydata %>% group_by(Index) %>%
summarise(Pecentile_25=quantile(Y2015, probs=0.25),
Pecentile_50=quantile(Y2015, probs=0.5),
Pecentile_75=quantile(Y2015, probs=0.75),
Pecentile_99=quantile(Y2015, probs=0.99))
#Example 41 : Calculate Percentile Values
mydata1 %>% group_by(Index) %>%
summarise(Pecentile_25=quantile(Y2015, probs=0.25),
Pecentile_50=quantile(Y2015, probs=0.5),
Pecentile_75=quantile(Y2015, probs=0.75),
Pecentile_99=quantile(Y2015, probs=0.99))
x= data.frame(N= 1:10)
x = mutate(x, pos = ntile(x$N,5))
models <- by_cyl %>% do(mod = lm(mpg ~ disp, data = .))
models %>% do(data.frame(
var = names(coef(.$mod)),
coef(summary(.$mod)))
)
#if() Family of Functions
mydata2 = select_if(mydata1, is.numeric)
mydata3 = select_if(mydata1, is.factor)
#Example 44 : Number of levels in factor variables
summarise_if(mydata1, is.factor, funs(nlevels(.)))
#Example 45 : Multiply by 1000 to numeric variables
mydata11 = mutate_if(mydata1, is.numeric, funs("new" = .* 1000))
#Example 46 : Convert value to NA
k <- c("a", "b", "", "d")
na_if(k, "")
models
data(models)
data("models")
models <- by_cyl %>% do(mod = lm(mpg ~ disp, data = .))
by_cyl <- group_by(mtcars, cyl)
models <- by_cyl %>% do(mod = lm(mpg ~ disp, data = .))
summarise(models, rsq = summary(mod)$r.squared)
models %>% do(data.frame(
var = names(coef(.$mod)),
coef(summary(.$mod)))
)
#Example 40 : Combine Data Frames
df1=data.frame(ID = 1:6,  x=letters[1:6])
df2=data.frame(ID = 7:12, x=letters[7:12])
xy = bind_rows(df1,df2)
xy = bind_cols(x,y)
df1
df2
xy = bind_rows(df1,df2)
install.packages("hflights")
xy = bind_rows(df1,df2)
df1
View(df)
View(mydata)
View(mydata1)
df = mydata1 %>%
rowwise() %>% mutate(Max= max(Y2012,Y2013,Y2014,Y2015)) %>%
select(Y2012:Y2015,Max)
df
View(df)
View(mydata1)
df = mydata1 %>%
rowwise() %>% mutate(Min= min(Y2012,Y2013,Y2014,Y2015)) %>%
select(Y2012:Y2015,Min)
View(df)
install.packages("hflights")
library("hflights")
library("hflights")
library(hflights)
install.packages("hflights")
install.packages("hflights")
#Summarize Multiple Columns
mydata[, .(mean(arr_delay), mean(dep_delay))]
#Adding Columns (Calculation on rows)
#mydata[, dep_sch:=dep_time - dep_delay]
#Summarize or Aggregate Columns
mydata[, .(mean = mean(arr_delay, na.rm = TRUE),
median = median(arr_delay, na.rm = TRUE),
min = min(arr_delay, na.rm = TRUE),
max = max(arr_delay, na.rm = TRUE))]
mydata03
#Sorting Data based on multiple variables
mydata03 = setorder(mydata, origin, -carrier)
#exercise 12
install.packages("data.table")
#load required library
library(data.table)
#Indexing Multiple Columns
setkey(mydata, origin, dest)
system.time(mydata[c("JFK", "LGA")])
#read data
mydata = fread("https://github.com/arunsrinivasan/satrdays-workshop/raw/master/flights_2014.csv")
#describe data
View(mydata)
nrow(mydata)
ncol(mydata)
names(mydata)
head(mydata)
#Selecting or Keeping Columns
dat1 = mydata[ , origin] # returns a vector
dat1 = mydata[ , .(origin)] # returns a data.table
#Keeping a column based on column position
dat2 =mydata[, 2, with=FALSE]
#keeping Multipul Columns
dat3 = mydata[, .(origin, year, month, hour)]
#Keeping multiple columns based on column position
dat4 = mydata[, c(2:4), with=FALSE]
#Dropping a Column
dat5 = mydata[, !c("origin"), with=FALSE]
#Dropping Multiple Columns
dat6 = mydata[, !c("origin", "year", "month"), with=FALSE]
#Rename Variables
setnames(mydata, c("dest"), c("Destination"))
setnames(mydata, c("UniqueCarrier","origin"), c("Destination", "origin.of.flight"))
setnames(mydata, c("dest","origin"), c("Destination", "origin.of.flight"))
setnames(mydata, c("Destination","origin"), c("dest", "origin.of.flight"))
# Filter based on one variable
dat8 = mydata[origin == "JFK"]
# Filter based on one variable
dat8 = mydata[origin.of.flight == "JFK"]
#select multiple values
dat9 = mydata[origin.of.flight %in% c("JFK", "LGA")]
#Apply Logical Operator : NOT
dat11 = mydata[origin.of.flight == "JFK" & carrier == "AA"]
#Faster Data Manipulation with Indexing
fast<-c(5, 10, 7, 20, 3, 13, 26)
#Set Key
# Indexing (Set Keys)
setkey(mydata, origin.of.flight)
#How to filter when key is turned on.
data12 = mydata[c("JFK", "LGA")]
#Performance Comparison
system.time(mydata[origin.of.flight %in% c("JFK", "LGA")])
system.time(mydata[c("JFK", "LGA")])
#Indexing Multiple Columns
setkey(mydata, origin.of.flight, dest)
#Filtering while setting keys on Multiple Columns
mydata[.("JFK", "MIA")]
#It is equivalent to the following code :
mydata[origin.of.flight == "JFK" & dest == "MIA"]
#To identify the column(s) indexed by
key(mydata)
#Sorting Data
mydata01 = setorder(mydata, origin.of.flight)
#Sorting Data on descending order
mydata02 = setorder(mydata, -origin.of.flight)
#Sorting Data based on multiple variables
mydata03 = setorder(mydata, origin.of.flight, -carrier)
#Adding Columns (Calculation on rows)
#mydata[, dep_sch:=dep_time - dep_delay]
#Summarize or Aggregate Columns
mydata[, .(mean = mean(arr_delay, na.rm = TRUE),
median = median(arr_delay, na.rm = TRUE),
min = min(arr_delay, na.rm = TRUE),
max = max(arr_delay, na.rm = TRUE))]
#Summarize Multiple Columns
mydata[, .(mean(arr_delay), mean(dep_delay))]
mydata[, lapply(.SD, mean), .SDcols = c("arr_delay", "dep_delay")]
#Summarize all numeric Columns
mydata[, lapply(.SD, mean)]
#Summarize with multiple statistics
mydata[, sapply(.SD, function(x) c(mean=mean(x), median=median(x)))]
#GROUP BY (Within Group Calculation)
#Summarize by group 'origin
mydata[, .(mean_arr_delay = mean(arr_delay, na.rm = TRUE)), by = origin]
#GROUP BY (Within Group Calculation)
#Summarize by group 'origin
mydata[, .(mean_arr_delay = mean(arr_delay, na.rm = TRUE)), by = origin.of.flight]
#Use key column in a by operation
mydata[, .(mean_arr_delay = mean(arr_delay, na.rm = TRUE)), keyby = origin.of.flight]
#Summarize multiple variables by group 'origin'
mydata[, .(mean(arr_delay, na.rm = TRUE), mean(dep_delay, na.rm = TRUE)), by = origin.of.flight]
#Remove Duplicates
setkey(mydata, "carrier")
unique(mydata)
#Extract values within a group
mydata[, .SD[1:2], by=carrier]
#Select LAST value from a group
mydata[, .SD[.N], by=carrier]
#SQL's RANK OVER PARTITION
dt = mydata[, rank:=frank(-distance,ties.method = "min"), by=carrier]
#Cumulative SUM by GROUP
dat = mydata[, cum:=cumsum(distance), by=carrier]
#Lag and Lead
DT <- data.table(A=1:5)
DT[ , X := shift(A, 1, type="lag")]
DT[ , Y := shift(A, 1, type="lead")]
#Between and LIKE Operator
DT = data.table(x=6:10)
DT[x %between% c(7,9)]
DT = data.table(Name=c("dep_time","dep_delay","arrival"), ID=c(2,3,4))
DT[Name %like% "dep"]
#Merging / Joins
(dt1 <- data.table(A = letters[rep(1:3, 2)], X = 1:6, key = "A"))
(dt2 <- data.table(A = letters[rep(2:4, 2)], Y = 6:1, key = "A"))
#Inner Join
merge(dt1, dt2, by="A")
#Left Join
merge(dt1, dt2, by="A", all.x = TRUE)
#Right Join
merge(dt1, dt2, by="A", all.y = TRUE)
#Full Join
merge(dt1, dt2, all=TRUE)
#Convert a data.table to data.frame
setDF(mydata)
set.seed(123)
X = data.frame(A=sample(3, 10, TRUE)),
B=sample(letters[1:3], 10, TRUE)
setDT(X, key = "A")
#Q1. Calculate total number of rows by month and then sort on descending order
mydata[, .N, by = month] [order(-N)]
dt
#Cumulative SUM by GROUP
dat = mydata[, cum:=cumsum(distance), by=carrier]
#Cumulative SUM by GROUP
dat = mydata[, cum:=cumsum(distance), by=carrier]
#Cumulative SUM by GROUP
dat = mydata[, cumu:=cumsum(distance), by=carrier]
dat = mydata[, cum:=cumsum(distance), by=carrier]
dat1 = mydata[, cum:=cumsum(distance) ]
dat1 = mydata[,cumsum(distance) ]
dat1 = mydata[cumsum(distance) ]
dat1 = mydata[cum = cumsum(distance) ]
#installing package
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
# Considering the iris data.
# Creating a histogram
ggplot(data  = iris, aes( x = Sepal.Length)) + geom_histogram( )
ggplot(data  = iris, aes(x = Sepal.Length)) + geom_histogram(binwidth=1)
ggplot(data = iris , aes(x=Sepal.Length)) + geom_histogram(color="black", fill="white", bins = 10)
#How to visualize various groups in histogram
ggplot(iris, aes(x=Sepal.Length, color=Species)) + geom_histogram(fill="white", binwidth = 1)
#Creating Density Plot
ggplot(iris, aes( x = Sepal.Length)) + geom_density( )
#How to show various groups in density plot
ggplot(iris, aes(x=Sepal.Length, color=Species)) + geom_density( )
#Creating Bar and Column Charts :
ggplot(mpg, aes(x= class)) + geom_bar()
ggplot(mpg, aes(x= class)) + geom_bar() + coord_flip()
#How to add or modify Main Title and Axis Labels
p = ggplot(mpg, aes(x= class)) + geom_bar()
p + labs(title = "Number of Cars in each type", x = "Type of car", y = "Number of cars")
#How to add data labels
p = ggplot(mpg, aes(x= class)) + geom_bar()
p = p + labs(title = "Number of Cars in each type", x = "Type of car", y = "Number of cars")
p + geom_text(stat='count', aes(label=..count..), vjust=-0.25)
#How to reorder Bars
library(plyr)
library(dplyr)
#How to reorder Bars
install.packages("plyr")
install.packages("plyr")
count(mpg,class) %>% arrange(-n) %>%
mutate(class = factor(class,levels= class)) %>%
ggplot(aes(x=class, y=n)) + geom_bar(stat="identity")
#Showing Mean of Continuous Variable by Categorical Variable
df = mpg %>% group_by(class) %>% summarise(mean = mean(displ)) %>%
arrange(-mean) %>% mutate(class = factor(class,levels= class))
p + geom_text(aes(label = sprintf("%0.2f", round(mean, digits = 2))),
vjust=1.6, color="white", fontface = "bold", size=4)
#Creating Stacked Bar Chart
p <- ggplot(data=mpg, aes(x=class, y=displ, fill=drv))
p + geom_bar(stat = "identity")
p + geom_bar(stat="identity", position=position_dodge())
ggplot(mtcars, aes(x=cyl, y=disp)) + geom_boxplot()
ggplot(mtcars, aes(x=cyl, y=disp)) + geom_boxplot(notch = TRUE)
#Scatter Plot
# Creating a scatter plot denoting various species.
ggplot(data = iris, aes( x = Sepal.Length, y = Sepal.Width,shape = Species, color = Species)) + geom_point()
# Creating scatter plot for automatic cars denoting different cylinders.
ggplot(data = subset(mtcars,am == 0),aes(x = mpg,y = disp,colour = factor(cyl))) + geom_point()
# Seeing the patterns with the help of geom_smooth.
ggplot(data = mtcars, aes(x = mpg,y = disp,colour = hp))  + geom_point() + geom_smooth()
# Plotting the horsepower using geom_line
ggplot(data = mtcars, aes(x = mpg,y = disp,colour = hp))  + geom_point(size = 2.5) + geom_line(aes(y = hp))
#Modifying the axis labels and appending the title and subtitle
#Adding title or changing the labels
ggplot(mtcars,aes(x = mpg,y = disp)) + geom_point() + labs(title = "Scatter plot")
ggplot(mtcars,aes(x = mpg,y = disp)) + geom_point() + ggtitle(label = "Scatter plot",
subtitle = "mtcars data in R")
#Changing the axis labels.
a + labs(color = "Cylinders")
a <- ggplot(mtcars,aes(x = mpg, y = disp, color = factor(cyl))) + geom_point()
a
#Changing the axis labels.
a + labs(color = "Cylinders")
a + labs(color = "Cylinders") + xlab("Mileage") + ylab("Displacement")
#Combining it all
a + labs(color = "Cylinders") + xlab("Mileage") + ylab("Displacement") + ggtitle(label = "Scatter plot", subtitle = "mtcars data in R")
#Playing with themes
#Changing the themes.
b <- ggplot(mtcars,aes(mpg,disp)) + geom_point()  + labs(title = "Scatter Plot")
#Changing the size and color of the Title and the background color.
b + theme(plot.title = element_text(color = "blue",size = 17),plot.background = element_rect("orange"))
b + theme_minimal( )
#Removing the lines from the background.
b + theme(panel.background = element_blank())
#Removing the text from x and y axis.
b + theme(axis.text = element_blank())
b + theme(axis.text.x = element_blank())
b + theme(axis.text.y = element_blank())
#Changing the legend position
c <- ggplot(mtcars,aes(x = mpg, y = disp, color = hp)) +labs(title = "Scatter Plot") + geom_point()
c +  theme(legend.position = "top")
#Combining everything.
c + theme(legend.position = "bottom", axis.text = element_blank()) +
theme(plot.title = element_text(color = "Forest Green",size = 17),plot.background = element_rect("Yellow"))
#Changing the color scales in the legend
c + scale_color_gradient(low = "yellow",high = "red")
c + scale_color_gradient2(low = "red",mid = "green",high = "blue")
c + theme(legend.position = "bottom") + scale_color_gradientn(colours = c("red","forest green","white","blue"))
#Changing the breaks in the legend.
#Changing the breaks in the legend
c + scale_color_continuous(name = "horsepower", breaks = seq(50,350,75), labels = paste(seq(50,350,75),"hp"))
#Changing the break points and color scale of the legend together.
#Trial 1 : This one is wrong
c + scale_color_continuous( breaks = seq(50,350,75)) +
scale_color_gradient(low = "blue",high = "red")
#Trial 2: Next one is wrong.
c  +  scale_color_gradient(low = "blue",high = "red") +
scale_color_continuous( breaks = seq(50,350,75))
#The correct way to do is to define the arguments in one function only.
c + scale_color_continuous(name = "horsepower", breaks = seq(50,350,75), low = "red", high = "black") + theme(panel.background = element_rect("green"),
plot.background = element_rect("orange"))
#Changing the axis cut points
d <- ggplot(mtcars,aes(x = mpg,y = disp)) + geom_point(aes(color = factor(am)))  +
xlab("Mileage") + ylab("Displacement") +
theme(panel.background = element_rect("black") , plot.background = element_rect("pink"))
d +  scale_x_continuous(limits = c(2,4)) + scale_y_continuous(limits = c(15,30))
d + scale_x_continuous(limits = c(2,4),breaks = seq(2,4,0.25)) +
scale_y_continuous(limits = c(15,30),breaks = seq(15,30,3))
5
5
a=5
a=9
5*3
c=5*3
c+a
x =c+a
getwd()
setwd("E:/DataScience")
getwd()
x <- c(1,2,3,5)
mean(x)
?mean
sum(x)
y <- c(1,2,3,NA,5)
mean(y)
mean(y,na.rm = T)
sum(y,na.rm = T)
1:10
sample(1:10, replace = T)
sample(1:10, replace = T)
sample(1:10, replace = T)
sample(1:10, replace = F)
1:10
mydata <- read.csv("c:/groups.csv", header=TRUE)
mydata <- read.csv("c:/groups.csv", header=TRUE)
View(mydata)
fix(mydata)
fix(mydata)
fix(colSums)
debug(colSums)
colSums(mydata)
colSums(mydata$GroupCategoryID)
colSums(is.na(mydata$GroupCategoryID))
fix(colSums)
colSums(mydata$GroupCategoryID)
str(mydata)
colSums(mydata$GroupOwner)
View(mydata)
colSums(is.na(mydata$GroupOwner))
table(colSums(is.na(mydata$GroupOwner)))
table(colSums(is.na(mydata)))
colSums(is.na(mydata))
colSums(mydata)
colSums(iris)
View(iris)
iris = iris[-c(5)]
colSums(iris)
install.packages("abc")
install.packages("dplyr")
install.packages("sas7bdat")
install.packages("dtplyr","plyr")
install.packages("dtplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("abind")
install.packages("arules")
install.packages("arules")
library(arules)
write.csv(mydata, "file1.csv")
getwd()
save.image("mydata.RData") # some warning msg is here
load("mydata.RData")
help("read.csv")
?read.csv
??read.csv
# read data in R
data1 <- read.csv(file.choose(),header = TRUE)
data1
print(data1)
median(data1$GroupCategoryID)
data1$GroupCategoryID
data1
median(data1$Q1)
attach(data1)
Q1
data1[c(2)]
median(data1[c(2)])
median.default(data1[c(2)])
mean(data1[c(2)])
View(Nile)
data("Groceries")
View(Groceries)
View(Groceries)
inspect(Groceries)
# Create a vector
x = c(1,2,4,5,NA,5,5,6,9)
y = c(1,2,3,4,56,7,8,9,5)
x=y
# Create a vector
x = c(1,2,4,5,NA,5,5,6,9)
x+y
z= sum(x+y,na.rm=T)
# factor example
gender <- c(1,2,1,2,1,2)
gender <-as.factor(gender)
gebder
gender
gender <- factor(gender, levels = c(1,2),labels = c("m","f"))
mode(gender)
table(gender)
a  = c(1,1,3,3)
b = c(1,2,3,4)
matrixx = cbind(a,b)
View(matrixx)
matrixx =as.data.frame(matrixx)
View(matrixx)
list1x = list(a,b)
list1x
dtaframe = data.frame(a,b,age)
View(dtaframe)
